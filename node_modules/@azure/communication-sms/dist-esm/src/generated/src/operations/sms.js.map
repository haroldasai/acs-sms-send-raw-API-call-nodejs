{"version":3,"file":"sms.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/sms.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,QAAQ,MAAM,kBAAkB,CAAC;AAC7C,OAAO,KAAK,OAAO,MAAM,mBAAmB,CAAC;AAC7C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAInD;;GAEG;AACH,MAAM,OAAO,GAAG;IAGd;;;OAGG;IACH,YAAY,MAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,IAAI,CACF,kBAAsC,EACtC,OAAmC;QAEnC,MAAM,gBAAgB,GAAgC,QAAQ,CAAC,oCAAoC,CACjG,OAAO,IAAI,EAAE,CACd,CAAC;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,kBAAkB,EAAE,OAAO,EAAE,gBAAgB,EAAE,EACjD,iBAAiB,CACmB,CAAC;IACzC,CAAC;CACF;AACD,2BAA2B;AAE3B,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAEvE,MAAM,iBAAiB,GAA2B;IAChD,IAAI,EAAE,MAAM;IACZ,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,eAAe;SACpC;KACF;IACD,WAAW,EAAE,UAAU,CAAC,kBAAkB;IAC1C,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IAC1C,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { SmsApiClient } from \"../smsApiClient\";\nimport { SendMessageRequest, SmsSendOperationResponse } from \"../models\";\n\n/**\n * Class representing a Sms.\n */\nexport class Sms {\n  private readonly client: SmsApiClient;\n\n  /**\n   * Initialize a new instance of the class Sms class.\n   * @param client Reference to the service client\n   */\n  constructor(client: SmsApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Sends a SMS message from a phone number that belongs to the authenticated account.\n   * @param sendMessageRequest Represents the body of the send message request.\n   * @param options The options parameters.\n   */\n  send(\n    sendMessageRequest: SendMessageRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<SmsSendOperationResponse> {\n    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(\n      options || {}\n    );\n    return this.client.sendOperationRequest(\n      { sendMessageRequest, options: operationOptions },\n      sendOperationSpec\n    ) as Promise<SmsSendOperationResponse>;\n  }\n}\n// Operation Specifications\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst sendOperationSpec: coreHttp.OperationSpec = {\n  path: \"/sms\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      bodyMapper: Mappers.SmsSendResponse\n    }\n  },\n  requestBody: Parameters.sendMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n"]}