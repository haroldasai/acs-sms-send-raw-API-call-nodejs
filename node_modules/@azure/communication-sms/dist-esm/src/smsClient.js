// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/// <reference lib="esnext.asynciterable" />
import { __awaiter } from "tslib";
import { parseClientArguments, isKeyCredential, createCommunicationAuthPolicy } from "@azure/communication-common";
import { createPipelineFromOptions, operationOptionsToRequestOptionsBase } from "@azure/core-http";
import { CanonicalCode } from "@opentelemetry/api";
import { SmsApiClient } from "./generated/src/smsApiClient";
import { SDK_VERSION } from "./constants";
import { createSpan } from "./tracing";
import { logger } from "./logger";
import { extractOperationOptions } from "./extractOperationOptions";
import { generateSendMessageRequest } from "./utils/smsUtils";
/**
 * Checks whether the type of a value is SmsClientOptions or not.
 *
 * @param options - The value being checked.
 */
const isSmsClientOptions = (options) => !!options && !isKeyCredential(options);
/**
 * A SmsClient represents a Client to the Azure Communication Sms service allowing you
 * to send SMS messages.
 */
export class SmsClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isSmsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;
        const libInfo = `azsdk-js-communication-sms/${SDK_VERSION}`;
        if (!options.userAgentOptions) {
            options.userAgentOptions = {};
        }
        if (options.userAgentOptions.userAgentPrefix) {
            options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
        }
        else {
            options.userAgentOptions.userAgentPrefix = libInfo;
        }
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info
            }
        });
        const authPolicy = createCommunicationAuthPolicy(credential);
        const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);
        this.api = new SmsApiClient(url, pipeline);
    }
    /**
     * Sends an SMS from a phone number that is acquired by the authenticated account, to another phone number.
     *
     * @param sendRequest - Provides the sender's and recipient's phone numbers, and the contents of the message
     * @param options - Additional request options
     */
    send(sendRequest, options = { enableDeliveryReport: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { operationOptions, restOptions } = extractOperationOptions(options);
            const { span, updatedOptions } = createSpan("SmsClient-Send", operationOptions);
            try {
                const response = yield this.api.sms.send(generateSendMessageRequest(sendRequest, restOptions), operationOptionsToRequestOptionsBase(updatedOptions));
                return response.value;
            }
            catch (e) {
                span.setStatus({
                    code: CanonicalCode.UNKNOWN,
                    message: e.message
                });
                throw e;
            }
            finally {
                span.end();
            }
        });
    }
}
//# sourceMappingURL=smsClient.js.map