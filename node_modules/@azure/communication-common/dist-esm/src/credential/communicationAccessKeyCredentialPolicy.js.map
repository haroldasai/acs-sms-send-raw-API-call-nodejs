{"version":3,"file":"communicationAccessKeyCredentialPolicy.js","sourceRoot":"","sources":["../../../src/credential/communicationAccessKeyCredentialPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAGlC,OAAO,EACL,UAAU,EAEV,MAAM,EAMN,iBAAiB,EAClB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAEjD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,4CAA4C,GAAG,CAC1D,UAAyB,EACH,EAAE;IACxB,OAAO;QACL,MAAM,EAAE,CAAC,UAAyB,EAAE,OAAiC,EAAE,EAAE;YACvE,OAAO,IAAI,sCAAsC,CAAC,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QACrF,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,sCAAuC,SAAQ,iBAAiB;IACpE;;;;OAIG;IACH,YACmB,SAAwB,EACzC,UAAyB,EACzB,OAAiC;QAEjC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAJV,cAAS,GAAT,SAAS,CAAe;IAK3C,CAAC;IAED;;;;OAIG;IACW,WAAW,CAAC,WAAwB;;YAChD,MAAM,IAAI,GAAG,WAAW,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAC9C,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YACxC,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;YAC1D,MAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC;YACjD,MAAM,aAAa,GAAG,GAAG,UAAU,2BAA2B,CAAC;YAE/D,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;YAC7B,MAAM,eAAe,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAC5E,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAEtE,MAAM,YAAY,GAAG,GAAG,IAAI,KAAK,eAAe,KAAK,MAAM,IAAI,WAAW,IAAI,WAAW,EAAE,CAAC;YAC5F,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;YAElE,IAAI,MAAM,EAAE;gBACV,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC;aACpD;YAED,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAC5C,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;YAC5D,WAAW,CAAC,OAAO,CAAC,GAAG,CACrB,eAAe,EACf,6BAA6B,aAAa,cAAc,SAAS,EAAE,CACpE,CAAC;YAEF,OAAO,WAAW,CAAC;QACrB,CAAC;KAAA;IAED;;OAEG;IACU,WAAW,CAAC,WAA4B;;YACnD,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC5D;YAED,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3E,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  URLBuilder,\n  WebResource,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptionsLike,\n  RequestPolicyFactory,\n  WebResourceLike,\n  HttpOperationResponse,\n  BaseRequestPolicy\n} from \"@azure/core-http\";\nimport { shaHash, shaHMAC } from \"./cryptoUtils\";\n\n/**\n * Creates an HTTP pipeline policy to authenticate a request using a `KeyCredential`.\n * @hidden\n *\n * @param credential - The key credential.\n */\nexport const createCommunicationAccessKeyCredentialPolicy = (\n  credential: KeyCredential\n): RequestPolicyFactory => {\n  return {\n    create: (nextpolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new CommunicationAccessKeyCredentialPolicy(credential, nextpolicy, options);\n    }\n  };\n};\n\n/**\n * CommunicationAccessKeyCredentialPolicy provides a means of signing requests made through\n * the SmsClient.\n */\nclass CommunicationAccessKeyCredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Initializes a new instance of the CommunicationAccessKeyCredential class\n   * using a base64 encoded key.\n   * @param accessKey - The base64 encoded key to be used for signing.\n   */\n  constructor(\n    private readonly accessKey: KeyCredential,\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike\n  ) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Signs a request with the provided access key.\n   *\n   * @param webResource - The WebResource to be signed.\n   */\n  private async signRequest(webResource: WebResource): Promise<WebResource> {\n    const verb = webResource.method.toUpperCase();\n    const utcNow = new Date().toUTCString();\n    const contentHash = await shaHash(webResource.body || \"\");\n    const dateHeader = isNode ? \"date\" : \"x-ms-date\";\n    const signedHeaders = `${dateHeader};host;x-ms-content-sha256`;\n\n    const url = URLBuilder.parse(webResource.url);\n    const query = url.getQuery();\n    const urlPathAndQuery = query ? `${url.getPath()}?${query}` : url.getPath();\n    const port = url.getPort();\n    const hostAndPort = port ? `${url.getHost()}:${port}` : url.getHost();\n\n    const stringToSign = `${verb}\\n${urlPathAndQuery}\\n${utcNow};${hostAndPort};${contentHash}`;\n    const signature = await shaHMAC(this.accessKey.key, stringToSign);\n\n    if (isNode) {\n      webResource.headers.set(\"Host\", hostAndPort || \"\");\n    }\n\n    webResource.headers.set(dateHeader, utcNow);\n    webResource.headers.set(\"x-ms-content-sha256\", contentHash);\n    webResource.headers.set(\n      \"Authorization\",\n      `HMAC-SHA256 SignedHeaders=${signedHeaders}&Signature=${signature}`\n    );\n\n    return webResource;\n  }\n\n  /**\n   * Signs the request and calls the next policy in the factory.\n   */\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    return this._nextPolicy.sendRequest(await this.signRequest(webResource));\n  }\n}\n"]}