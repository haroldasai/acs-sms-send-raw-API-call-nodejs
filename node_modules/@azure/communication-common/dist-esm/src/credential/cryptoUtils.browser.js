// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { encodeUTF8, encodeBase64, encodeUTF8fromBase64 } from "./encodeUtils.browser";
const globalRef = globalThis;
const getCrypto = () => {
    if (!globalRef) {
        throw new Error("Could not find global");
    }
    if (!globalRef.crypto || !globalRef.crypto.subtle) {
        throw new Error("Browser does not support cryptography functions");
    }
    return globalRef.crypto.subtle;
};
export const shaHash = (content) => __awaiter(void 0, void 0, void 0, function* () {
    const data = encodeUTF8(content);
    const hash = yield getCrypto().digest("SHA-256", data);
    return encodeBase64(hash);
});
export const shaHMAC = (secret, content) => __awaiter(void 0, void 0, void 0, function* () {
    const importParams = { name: "HMAC", hash: { name: "SHA-256" } };
    const encodedMessage = encodeUTF8(content);
    const encodedKey = encodeUTF8fromBase64(secret);
    const crypto = getCrypto();
    const cryptoKey = yield crypto.importKey("raw", encodedKey, importParams, false, ["sign"]);
    const signature = yield crypto.sign(importParams, cryptoKey, encodedMessage);
    return encodeBase64(signature);
});
//# sourceMappingURL=cryptoUtils.browser.js.map